Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output:  321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only hold integers within the 32-bit signed integer range. 
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.


Version 1

var reverse = function(x) {
    var y = Math.abs(x);
    if(y.toString(2).length > 31) return 0;
    var arr = y.toString().split("").reverse();
    while(arr[0] === 0){
        arr.shift(0);
    }
    var result = Number(arr.join(""));
    if(result.toString(2).length > 31) return 0;
    return x > 0 ? result : 0 - result;
};//数组reverse()
__________________________________________________________________________________________________________________________________________

Version 2

var reverse = function(x) {
    var y = Math.abs(x);
    var result = 0;
    while(y !== 0){
        result = result * 10 + y % 10;
        y = parseInt(y / 10);
    }
    x > 0 ? result = result : result = -result;
    if(result > 2147483648 || result < -2147483649) return 0;
    return result;
};//数字反转的公式

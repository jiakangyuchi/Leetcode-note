Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.

Follow up:
What if the inputs contain unicode characters? How would you adapt your solution to such case?



Version1

var isAnagram = function(s, t) {
    if(s.length === t.length){
        var map_s = {};
        var map_t = {};
        for(let i = 0; i < s.length; i++){
            map_s[s[i]] = (map_s[s[i]]||0) + 1;
            map_t[t[i]] = (map_t[t[i]]||0) + 1;
        }
        for(let i = 0; i < s.length; i++){
            if(map_s[s[i]] !== map_t[s[i]]){
                return false;
            }
        }
        return true;
    }
    return false;
};//hashmap存储每个字母出现的次数，比较两个hashmap，时间复杂度O(n)

________________________________________________________________________________________________________________________________________

Version2

var isAnagram = function(s, t) {
    var map = {};
    for(let i = 0; i < s.length; i ++){
        let v = s[i];
        map[v] = (map[v] || 0) + 1;
    }
    for(let i = 0; i < t.length; i ++){
        let v = t[i];
        if(map[v] === undefined || map[v] === 0) return false;
        map[v] --;
    }
    for(var m in map){
        if(map[m] !== 0) return false;
    }
    return true;
};//只用一个map，减少空间复杂度，最后看每个值是不是为0；

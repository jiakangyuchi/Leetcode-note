Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?



Version1

var intersect = function(nums1, nums2) {
    var map1 = {};
    var map2 = {};
    var result = [];
    for(let i = 0; i < nums1.length; i++){
        map1[nums1[i]] = (map1[nums1[i]]||0) + 1;
    }
    for(let i = 0; i < nums2.length; i++){
        map2[nums2[i]] = (map2[nums2[i]]||0) + 1;
    }
    for(var key in map1){
        if(map2[key] !== undefined){
            for(let i = 0; i < Math.min(map1[key], map2[key]); i++){
                result.push(Number(key));
            }
            
        }
    }
    return result;
};//将数据存入两个hashmap，然后比较，时间复杂度O(mn)

————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
Version2

var intersect = function(nums1, nums2) {
    var map = {};
    var result = [];
    for(let i = 0; i < nums1.length; i++){
        map[nums1[i]] = (map[nums1[i]]||0) + 1; 
    }
    for(let i = 0; i < nums2.length; i++){
        if(map[nums2[i]] > 0){
            map[nums2[i]]--;
            result.push(nums2[i]);
        }
    }
    return result;
};//hashmap存入nums1的数据，遍历第二个数组,时间复杂度O(n)

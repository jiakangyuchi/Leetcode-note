Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.
Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, return 0.
Note: The length of each dimension in the given grid does not exceed 50.




var maxAreaOfIsland = function(grid) {
    var h = grid.length;
    var w = grid[0].length;
    var result = 0;
    function dfs(i, j){
        if(i >= 0 && i < h && j >= 0 && j< w){
            if(grid[i][j] === 1){
                grid[i][j] = 0;
                return 1 + dfs(i - 1, j) + dfs(i, j + 1) + dfs(i + 1, j) + dfs(i, j - 1);
            }
        }    
        return 0;
    }
    for(var x = 0; x < h; x++){
        for(var y = 0; y < w; y++){
            result = Math.max(result, dfs(x, y));
        }
    }
    return result;
};//DFS深度优先搜索，每一个点会延伸出4个点，是1则返回1加上其周围点的返回值，不断递归，是0则返回0

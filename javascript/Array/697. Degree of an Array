Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6
Note:

nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.



var findShortestSubArray = function(nums) {
    if(nums.length === 0) return 0;
    var map = new Map();
    var map2 = new Map();
    var array = [];
    var array2 = [];
    for(var i = 0; i < nums.length; i++){
        if(map.get(nums[i]) !== undefined){
            array[nums[i]]++;
            map2.set(nums[i], map2.get(nums[i]) + i - map.get(nums[i]));
            map.set(nums[i], i);             
        }
        else{
            map.set(nums[i], i);
            map2.set(nums[i], 1);
            array[nums[i]] = 1;
        }
    }
    var max = Math.max(...array.filter(x => x !== undefined));
    for(var j = 0; j < array.length; j++){
        if(array[j] === max){
            array2.push(map2.get(j));
        }
    }
    return Math.min(...array2);
};//多个hashmap，时间复杂度O(n)，但是整体方法太复杂，可以考虑用动态规划做

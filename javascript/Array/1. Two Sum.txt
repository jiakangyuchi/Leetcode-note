Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


Version 1
var twoSum = function(nums, target) {
    var ori = Array.from(nums);
    nums.sort((x, y) => x - y);
    var i = 0; 
    var j = nums.length - 1;
    while(j > i){
        let sum = nums[i] + nums[j];
        if(sum > target){
            j --;
            continue;
        }
        else if(sum < target){
            i ++;
            continue;
        }
        break;
    }
    var left = ori.indexOf(nums[i]);
    var right = ori.lastIndexOf(nums[j]);
    return [left, right];
};//先排序，然后双指针两头逼近，时间复杂度O(n^2)，较为复杂，如果数组本来就是有序的话，双指针会很好用。


________________________________________________________________________________________________________________________________________
Version 2
var twoSum = function(nums, target) {
    for(var i = 0; i < nums.length - 1; i++){
        for(var j = i + 1; j < nums.length; j++){
            if(nums[i] + nums[j] === target){
                return [i, j];
            }
        }
    }
};//顺序查找，时间复杂度O(n^2)。


_______________________________________________________________________________________________________________________________________
Version 3
function twoSum(nums, target) {
    var map = new Map();
    for(var i = 0; i < nums.length; i++){
        if(map.get(target - nums[i]) !== undefined){
            return [map.get(target - nums[i]), i];
        }
        map.set(nums[i], i);   
    }
}//散列表hashmap，时间复杂度O(n),用空间换时间

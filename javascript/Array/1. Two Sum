Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


Version 1
//先排序，然后双指针两头逼近，时间复杂度O(n^2)，较为复杂，如果数组本来就是有序的话，双指针会很好用。
var twoSum = function(nums, target) {
    var ori = new Array(...nums);
    nums.sort((x, y) => (x - y));
    var left = 0;
    var right = nums.length - 1;
    while(left < right){
        if(nums[left] + nums[right] > target){
            right -= 1;
        }
        else if(nums[left] + nums[right] < target){
            left += 1;
        }
        else{
            left = nums[left];
            right = nums[right];
            break;
        }
    }
    if(left === right){
        left = ori.indexOf(left);
        right = ori.lastIndexOf(right);
    }
    else{
        left = ori.indexOf(left);
        right = ori.indexOf(right);    
    }
    return left > right ? [right, left] : [left, right];
};


________________________________________________________________________________________________________________________________________
Version 2
var twoSum = function(nums, target) {
    for(var i = 0; i < nums.length - 1; i++){
        for(var j = i + 1; j < nums.length; j++){
            if(nums[i] + nums[j] === target){
                return [i, j];
            }
        }
    }
};//顺序查找，时间复杂度O(n^2)

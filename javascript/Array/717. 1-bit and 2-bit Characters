We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.

Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.
Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.
Note:

1 <= len(bits) <= 1000.
bits[i] is always 0 or 1.

//单独的1不能构成1bit, 所以需要看最后的0前面有几个连续的1, 偶数则true, 1无法与0配对, 奇数则false.
var isOneBitCharacter = function(bits) {
    var length = bits.length;
    var result = true;
    if(length === 0){
        return false;
    }
    else if(length >= 2 && bits[length-2] === 1){
        while(bits[length-2] === 1){
            length--;
            result = !result;
        }
        return result;
    }
    else{
        return true;
    }
};

Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].
The length and width of the given matrix are in the range of [1, 150].

/**
 * @param {number[][]} M
 * @return {number[][]}
 */
var imageSmoother = function(M) {
    var array = M;
    var height = M.length;
    var width = M[0].length;
    for(let i = 0; i<height; i++){
        for(let j = 0; j<width; j++){
            if(i == 0 && 0<j<width-1){//fist row line
                    array[i][j] = (M[i][j-1] + M[i][j] + M[i][j+1] + M[i+1][j-1] + 
                                   M[i+1][j] + M[i+1][j+1])/6;
                }
            else if(0<i<height-1 && j == 0){//
                    array[i][j] = (M[i-1][j] + M[i-1][j+1] + M[i][j] + M[i][j+1] + 
                                   M[i+1][j] + M[i+1][j+1])/6;
                }
            else if(0<i<height-1 && j == width-1){
                   array[i][j] = (M[i-1][j-1] + M[i-1][j] + M[i][j-1] + M[i][j] + 
                                  M[i+1][j-1] + M[i+1][j])/6;
                }
            else if(0<j<width-1 && i == height-1){
                   array[i][j] = (M[i-1][j-1] + M[i-1][j] + M[i-1][j+1] + M[i][j-1] + 
                                  M[i][j] + M[i][j+1])/6;
                }
            else if(i == j == 0){
                   array[i][j] = (M[i][j] + M[i][j+1] + M[i+1][j] + M[i+1][j+1])/4;
            }
            else if(i == 0 && j == width-1){
                   array[i][j] = (M[i][j-1] + M[i][j] + M[i+1][j-1] + M[i+1][j])/4;
            }
            else if(i == height-1 && j == 0){
                   array[i][j] = (M[i-1][j] + M[i-1][j+1] + M[i][j] + M[i][j+1])/4;
            }
           else if(i == height-1 && j == width-1){
                   array[i][j] = (M[i-1][j-1] + M[i-1][j] + M[i][j-1] + M[i][j])/4;
            } 
            else{
                array[i][j] = (M[i-1][j-1]||0 + M[i-1][j]||0 + M[i-1][j+1]||0 + M[i][j-1]||0 + M[i][j] + M[i][j+1]||0 + M[i+1][j-1]||0 + 
                        M[i+1][j]||0 + M[i+1][j+1]||0)/9;
            }
        }
    }
    return array;
};
